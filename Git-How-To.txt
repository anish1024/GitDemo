
git init 			 /* create a new repo */
/* git create staging area which sits betwenn the local repo and Git repo.
   We add/delete files to the staging area first.
   Then a commit cmd is issued against the staging area which commits the entire staging area 
   as a single bundle.  
 */

/*
  for configuring userId in Git Repo
 */ 
git config --global user.name "YOUR_FULL_NAME"
git config --global user.email "YOUR_EMAIL_ADDRESS"

git status          		 /* shows the current commit state */
git add 'filename'			 /* add file to staging area */
git commit    				 /* Commits the tracked changes and prepares them to be pushed to a remote repository */
git commit -m "First commit" 
git reset --soft HEAD~1		 /*  To remove this commit and modify the file */

git remote add <repoName> <remote-rep-URL> /* SetUps the new remote repo link.  */
git remote remove <repoName>
git remote -v				/* View currently setup remote Links. */

git pull <repoName> master   /* checkout from remote repo */
git push <repoName> master   /* commit to remote repo */ 

git diff 					/* show diff between working dir and staging area */
git diff --stage 			/* show diff between staging area and git repository */
git diff commit1 commit2	/* commit1 is last commit , commit2 before commit1 */
git show <commitId>  		/* shows the diff between <commitid> and its parent, so u can diif without knowing commitIds parent */

git branch 				   /* displays the branch in the curretn repo, master is default branch */
git branch <branch-name>   /* create a new branch repo from master */
git checkout <branch-name>  /* switches to branch <branch-name> */
git checkout -b <branch-name>  /* equivalent to previous 2 commands */
git merge master <branch-name> /* merge the branch <branch-name> to master branch */
git branch -d <branch-name> /* delete branch */

git log --graph --oneline master <branch-name> /* display the visual graph of branch params */



